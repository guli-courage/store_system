<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="system.mapper.ProductMapper">
    <resultMap id="productMapper" type="system.pojo.Product">

        <id property="productId" column="product_id" javaType="java.lang.Integer"/>
        <result property="productName" column="product_name" javaType="java.lang.String"/>
        <result property="productPrice" column="product_price" javaType="java.lang.Double"/>
        <result property="productStock" column="product_stock" javaType="java.lang.Integer"/>
        <result property="productSales" column="product_sales" javaType="java.lang.Integer"/>
        <result property="productDescription" column="product_description" javaType="java.lang.String"/>
        <result property="productState" column="product_state" javaType="java.lang.String"/>
        <result property="productStoreId" column="product_store_id" javaType="java.lang.Integer"/>
        <result property="productTypeId" column="product_type_id" javaType="java.lang.Integer"/>

        <association property="productType" resultMap="system.mapper.ProductTypeMapper.productTypeMapper"/>
    </resultMap>
    <update id="updateState">
        UPDATE `store_system`.`product`
        SET `product_state` = #{productState}
        WHERE `product_id` = #{productId}
    </update>
    <insert id="insertProduct">
        INSERT INTO `store_system`.`product` (`product_name`, `product_price`, `product_stock`, `product_sales`,
                                              `product_description`, `product_state`, `product_store_id`,
                                              `product_type_id`)
        VALUES (#{productName}, #{productPrice}, #{productStock}, #{productSales}, #{productDescription}, 'verify',
                #{productStoreId},
                #{productTypeId})
    </insert>
    <select id="selectByNameAndStoreId" resultMap="productMapper">
        SELECT p.product_id,
               p.product_name,
               p.product_price,
               p.product_stock,
               p.product_sales,
               p.product_description,
               p.product_state,
               p.product_store_id,
               p.product_type_id,
               pt.type_id,
               pt.type_name
        FROM product p FORCE INDEX (idx_store_name_type)
        JOIN product_type pt
        ON p.product_type_id = pt.type_id
        WHERE p.product_store_id = #{productStoreId}
          AND p.product_name = #{productName}
    </select>
    <select id="selectByVo" resultMap="productMapper">
        SELECT product.*, product_type.*
        FROM product
        JOIN product_type ON product.product_type_id = product_type.type_id
        <where>
            <if test="productName  != null and productName !=''">
                and product_name like '%${productName}%'
            </if>
            <if test="productPrice  != null and productPrice !=''">
                and product_price = #{productPrice}
            </if>
            <if test="productStock  != null and productStock !=''">
                and product_stock = #{productStock}
            </if>
            <if test="productSales  != null and productSales !=''">
                and product_sales = #{productSales}
            </if>
            <if test="productState  != null and productState !=''">
                and product_state = #{productState}
            </if>
            <if test="productStoreId  != null and productStoreId !=''">
                and product_store_id = #{productStoreId}
            </if>
            <if test="productTypeId  != null and productTypeId !=''">
                and product_type_id= #{productTypeId}
            </if>
        </where>
    </select>

    <select id="selectOrder" resultMap="productMapper">
        SELECT
        p.product_id, p.product_name, p.product_price,
        p.product_stock, p.product_sales, p.product_description,
        p.product_state, p.product_store_id, p.product_type_id,
        pt.type_id, pt.type_name
        FROM product p
        JOIN product_type pt ON p.product_type_id = pt.type_id
        <where>
            <if test="productName != null and productName != ''">
                AND p.product_name LIKE concat('%', #{productName}, '%')
            </if>
            <if test="productPrice  != null and productPrice !=''">
                AND p.product_price <![CDATA[ <= ]]> #{productPrice}
            </if>
            <if test="productStoreId  != null and productStoreId !=''">
                AND p.product_store_id = #{productStoreId}
            </if>
            <if test="productTypeId  != null and productTypeId !=''">
                AND p.product_type_id = #{productTypeId}
            </if>
            AND p.product_stock <![CDATA[ > ]]> 0
            AND p.product_state = #{productState}
        </where>
        ORDER BY p.product_sales DESC
    </select>

    <select id="selectById" resultMap="productMapper">
        SELECT p.product_id,
               p.product_name,
               p.product_price,
               p.product_stock,
               p.product_sales,
               p.product_description,
               p.product_state,
               p.product_store_id,
               p.product_type_id,
               pt.type_id,
               pt.type_name
        FROM product p
                 JOIN product_type pt ON p.product_type_id = pt.type_id
        WHERE product_id = #{productId}
    </select>

    <update id="updateProduct">
        UPDATE `store_system`.`product`
        SET `product_name`        = #{productName},
            `product_price`       = #{productPrice},
            `product_stock`       = #{productStock},
            `product_sales`       = #{productSales},
            `product_description` = #{productDescription},
            `product_state`       = #{productState},
            `product_type_id`     = #{productTypeId}
        WHERE `product_id` = #{productId}
    </update>

    <update id="updateStock">
        UPDATE `store_system`.`product`
        SET `product_stock` = #{productStock}
        WHERE `product_id` = #{productId}
    </update>

    <update id="updatePrice">
        UPDATE `store_system`.`product`
        SET `product_price` = #{productPrice}
        WHERE `product_id` = #{productId}
    </update>

    <update id="updateSales">
        UPDATE `store_system`.`product`
        SET `product_sales` = #{productSales}
        WHERE `product_id` = #{productId}
    </update>


</mapper>